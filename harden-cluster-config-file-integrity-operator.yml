- name: ' Konductor | Provision UPI Infra | harden-cluster-config-file-integrity-operator.yml'
  hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'
  vars:
    module: "Apply FileIntegrity Config"
    ansible_name_module: " Post Cluster Installation | Harden Cluster | {{ module }}"
  pre_tasks:
    - name: '{{ ansible_name_module }} | import_role | OCP cluster login'
      import_role:
        name: ocp-cluster-login 

  tasks:
    - name: '{{ ansible_name_module }} | Configure compliance scan if not already done'
      when:
        - configure_fileintegrity is defined
        - configure_fileintegrity | bool
      block:
        - name: '{{ ansible_name_module }} | | get storage class if not provided'
          shell: >
            {{ openshift_cli }} get nodes --no-headers | awk '{print $3}' | grep -v ','| sort | uniq
          register: node_roles

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | Render File integrity CR'
          template:
            src: "templates/fileintegrity-cr.yaml.j2"
            dest: "{{ staging_dir | d('/tmp', true) }}/{{ item }}-fileintegrity-cr.yaml"
            force: yes
          vars:
            node_role: "{{ item }}"
          loop: "{{ node_roles.stdout_lines }}"
          when:
            - node_roles is defined
            - node_roles.stdout_lines is defined
            - node_roles.stdout_lines | length > 0
          register: fileintegrity_config_created

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | FileIntegrity config '
          command: >
            {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/{{ item }}-fileintegrity-cr.yaml -n openshift-file-integrity
          loop: "{{ node_roles.stdout_lines }}"
          when:
            - node_roles is defined
            - node_roles.stdout_lines is defined
            - node_roles.stdout_lines | length > 0
          register: fileintegrity_config_applied

        - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | get Fileintegrity Objects'
          shell: >
            {{ openshift_cli }} get fileintegrities.fileintegrity.openshift.io -n openshift-file-integrity --no-headers | awk '{print $1}'
          register: fileintegrities

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} get | query FileIntegrity status '
          command: >
            {{ openshift_cli }} get fileintegrities.fileintegrity.openshift.io {{ item }} -n openshift-file-integrity -o jsonpath="{ .status.phase }"
          loop: "{{ fileintegrities.stdout_lines }}"
          when:
            - fileintegrities is defined
            - fileintegrities.stdout_lines is defined
            - fileintegrities.stdout_lines | length > 0
          register: fileintegrity_statuses

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} get | query FileIntegrity status results'
          shell: >
            {{ openshift_cli }} get fileintegritynodestatuses.fileintegrity.openshift.io -n openshift-file-integrity -o jsonpath="{ .items[*].results[*].condition }"
          register: fileintegrity_conditions

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} get | query FileIntegrity status objects'
          shell: >
            {{ openshift_cli }} get fileintegritynodestatuses.fileintegrity.openshift.io -n openshift-file-integrity --no-headers | awk '{print $1}'
          register: fileintegrity_node_statuses

