apiVersion: ocs.openshift.io/v1
kind: StorageCluster
metadata:
  annotations:
    uninstall.ocs.openshift.io/cleanup-policy: delete
    uninstall.ocs.openshift.io/mode: graceful
  finalizers:
  - storagecluster.ocs.openshift.io
  name: ocs-storagecluster
  namespace: openshift-storage
spec:
  arbiter: {}
  encryption:
    kms: {}
  externalStorage: {}
{% if enable_flexible_scalling is defined and enable_flexible_scalling | bool %}
  flexibleScaling: true
{% endif %}
  managedResources:
    cephBlockPools: {}
    cephCluster: {}
    cephConfig: {}
    cephDashboard: {}
    cephFilesystems: {}
    cephNonResilientPools: {}
    cephObjectStoreUsers: {}
    cephObjectStores: {}
    cephToolbox: {}
  mirroring: {}
{% if enable_mcg is defined and enable_mcg | bool %}
  multiCloudgateway:
    dbStorageClassName: {{ odf_default_provider_rwo_sc | d('default-rwo', true) }}
    reconciliationStrategy: standalone
    endpoints:
      maxCount: {{ noobaa_mcg_max_count }}
      minCount: {{ noobaa_mcg_min_count }}
{% if disable_lb_svc is defined and disable_lb_svc | bool %}
    disableLoadBalancerService: {{ disable_lb_svc }}
{% endif %}
{% endif %}
{% if enable_nfs is defined and enable_nfs | bool %}
  nfs:
    enable: true
    storageClassName: {{ odf_nfs_storage_class | d('default-nfs', true) }}
{% endif %}
  nodeTopologies: {}
  resources:
    noobaa-db:
      limits:
        cpu: "{{ noobaa_db_cpu_limit }}"
        memory: "{{ noobaa_db_mem_limit }}"
      requests:
        cpu: "{{ noobaa_db_cpu_request }}"
        memory: "{{ noobaa_db_mem_request }}"
    noobaa-endpoint:
      limits:
        cpu: "{{ noobaa_endpoint_cpu_limit }}"
        memory: "{{ noobaa_endpoint_mem_limit }}"
      requests:
        cpu: "{{ noobaa_endpoint_cpu_request }}"
        memory: "{{ noobaa_endpoint_mem_request }}"
    noobaa-core:
      limits:
        cpu: "{{ noobaa_core_cpu_limit }}"
        memory: "{{ noobaa_core_mem_limit }}"
      requests:
        cpu: "{{ noobaa_core_cpu_request }}"
        memory: "{{ noobaa_core_mem_request }}"
  storageDeviceSets:
  - config: {}
    count: 1 
    dataPVCTemplate:
      metadata: {}
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: {{ odf_device_block_size | d('4Ti', true) }}
        storageClassName: {{ odf_storage_class | d('odf-managed-block', true) }}
        volumeMode: {{ odf_device_volume_mode | d('Block', true) }}
      status: {}
    name: ocs-deviceset-gp3-csi
    placement: {}
    portable: true
    preparePlacement: {}
{% if enable_remote_consumers is defined and enable_remote_consumers | bool %}
    providerAPIServerServiceType: NodePort
    allowRemoteStorageConsumers: true
{% endif %}
    replica: {{ odf_node_count | d('3', true) }}
    resources: {}
