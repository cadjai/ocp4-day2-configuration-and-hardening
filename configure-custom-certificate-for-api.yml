- name: ' Configure Keycloak Provider | configure-custom-certificate-for-api.yml'
  hosts: localhost
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'
  vars:
    module: "Config API Certificate"
    ansible_name_module: "Configure Custom Certificate | {{ module }}"
  pre_tasks:
    - name: '{{ ansible_name_module }} | Ensure required variables are set'
      block:
        - assert:
            that:
              - add_custom_cert_api is defined and add_custom_cert_api | bool
            msg: " the add_custom_cert_api must be set to true "
        - assert:
            that:
              - cluster_api_fqdn is defined and cluster_api_fqdn != ''
            msg: " the cluster_api_fqdn must be set to true "
        - assert:
            that:
              - api_cert_file is defined and api_cert_file != ""
            msg: " the api_cert_file must be set and valid "
        - assert:
            that:
              - api_cert_key_file is defined and api_cert_key_file != ""
            msg: " the api_cert_key_file must be set and valid "
             
    - name: Install required pip library
      pip:
        name: openshift
        state: present

    - name: Ensure Proper Python dependency is installed for Openshift
      python_requirements_facts:
        dependencies:
          - openshift
          - requests
    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          --token {{ ocp_cluster_token }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      when:
        - ocp_cluster_token is defined and ocp_cluster_token != ""
      register: login_out

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          -u {{ ocp_cluster_user }} \
          -p {{ ocp_cluster_user_password }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      when:
        - not ocp_cluster_token is defined or ocp_cluster_token == ""
      register: login_out

    - name: '{{ ansible_name_module }} Check Custom API Server Certificate files'
      block:
        - name: '{{ ansible_name_module }} | config custom Cert API | check custom cert file'
          stat:
            path: "{{ api_cert_file }}"
          register: api_cert_file_exist

        - name: '{{ ansible_name_module }} | config custom Cert API | check custom cert key file'
          stat:
            path: "{{ api_cert_key_file }}"
          register: api_cert_key_file_exist

  tasks:
    - name: '{{ ansible_name_module }} | Configure API server to use custom certificate'
      when:
        - api_cert_file_exist is defined
        - api_cert_file_exist.stat is defined
        - api_cert_file_exist.isreg is defined
        - api_cert_file_exist.isreg | bool
        - api_cert_key_file_exist is defined
        - api_cert_key_file_exist.stat is defined
        - api_cert_key_file_exist.stat.isreg is defined
        - api_cert_key_file_exist.stat.isreg | bool
      block:
        - name: '{{ ansible_name_module }} | Get Existing API custom cert secret'
          command: >
            {{ openshift_cli }} get secret api-secret -n openshift-config
          ignore_errors: yes
          register: api_secret_exist

        - name: '{{ ansible_name_module }} | Delete Existing API custom cert secret'
          command: >
            {{ openshift_cli }} delete secret api-secret -n openshift-config
          ignore_errors: yes
          when:
            - api_secret_exist.rc is defined
            - api_secret_exist.rc == 0
          register: api_secret_exist

        - name: '{{ ansible_name_module }} | create API custom cert secret'
          command: >
            {{ openshift_cli }} create secret tls api-secret --cert={{ api_cert_file }} --key={{ api_cert_key_file }} -n openshift-config

        - name: '{{ ansible_name_module }} | Patch API Server'
          command: >
                  {{ openshift_cli }} patch apiserver cluster --type=merge -p  '{"spec": {"servingCerts": {"namedCertificates": [{"names": ["{{ cluster_api_fqdn }}"], "servingCertificate": {"name": "api-secret"}}]}}}' -n openshift-ingress-operator
          register: apiserver_patched

        - name: '{{ ansible_name_module }} | Verify API Server Cert Config'
          shell: >
            {{ openshift_cli }} get apiserver cluster -o yaml | grep -i '{{ cluster_api_fqdn }}'
          register: apiserver_patch_check

        - name: '{{ ansible_name_module }} | Update kubeconfig with custom CA if appropriate'
          when:
            - update_kubeconfig is defined
            - update_kubeconfig | bool
            - kubeconfig_file is defined
            - kubeconfig_file != ''
          block:
            - name: '{{ ansible_name_module }} | config custom Cert API | check kubeconfig file'
              become: yes
              stat:
                path: "{{ kubeconfig_file }}"
              register: kubeconfig_file_exist

            - name: '{{ ansible_name_module }} | config custom Cert API | Retrieve encoded CA data from kubeconfig file'
              become: yes
              shell: >
                cat {{ kubeconfig_file }} | grep certificate-authority-data | awk '{print $2}' 
              register: kubeconfig_ca_data

            - name: '{{ ansible_name_module }} | config custom Cert API | Save decoded CA data from kubeconfig file to file'
              become: yes
              shell: >
                cat {{ kubeconfig_file }} | grep certificate-authority-data | awk '{print $2}' | base64 -d > {{ original_ca_file | default('/tmp/ca-bundle-orig.crt', true) }}
              register: kubeconfig_ca_data_file

            - name: '{{ ansible_name_module }} | config custom CA kubeconfig | get custom ca data from cm'
              shell: >
                {{ openshift_cli }} extract cm/user-ca-bundle -n openshift-config --to={{ extracted_custom_ca_file | default('/tmp/', true) | dirname }} --confirm=true
              ignore_errors: true
              register: custom_ca_data_file

            - name: '{{ ansible_name_module }} | config custom CA kubeconfig | Create updated ca-bundle file'
              shell: >
                cat {{ original_ca_file | default('/tmp/ca-bundle-orig.crt', true) }} {{ extracted_custom_ca_file | default('/tmp/ca-bundle.crt', true) }} > {{ merged_ca_file | default('/tmp/updated-ca-bundle.crt', true) }}

            - name: '{{ ansible_name_module }} | config custom CA kubeconfig | Encode Updated CA Cert'
              shell: >
                cat {{ merged_ca_file | default('/tmp/updated-ca-bundle.crt', true) }} | base64 -w0; echo
              register: updated_ca_bundle_crt

            - name: '{{ ansible_name_module }} | config custom CA kubeconfig | Update CA Cert in kubeconfig'
              replace:
                path: "{{ kubeconfig_file }}"
                regexp: "certificate-authority-data: {{ kubeconfig_ca_data.stdout }}"
                replace: "certificate-authority-data: {{ updated_ca_bundle_crt.stdout }}"
                backup: yes
              register: updated_kubeconfig 

