- name: ' Konductor | Provision UPI Infra | fix-cloud-credentials-co-degraded-errors.yml'
  hosts: localhost
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'
  vars:
    module: "Fix Cloud Credential CO error "
    ansible_name_module: " Post Cluster Installation | {{ module }}"

  pre_tasks:
    - name: Install required pip library
      pip:
        name: openshift
        state: present

    - name: Ensure Proper Python dependency is installed for Openshift
      python_requirements_facts:
        dependencies:
          - openshift
          - requests

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          --token {{ ocp_cluster_token }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      when:
        - ocp_cluster_token is defined and ocp_cluster_token != ""
      register: login_out

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          -u {{ ocp_cluster_user }} \
          -p {{ ocp_cluster_user_password }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      when:
        - not ocp_cluster_token is defined or ocp_cluster_token == ""
      register: login_out

  tasks:
    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} get | cluster SDN '
      ansible.builtin.shell: >
        {{ openshift_cli }} -n openshift-cloud-credential-operator get credentialsRequest -o json | jq -r '.items[] | select(.spec.providerSpec.kind=="AWSProviderSpec") | select(.status.conditions[]?.message | contains("failed to grant creds")) | {"name": .metadata.name, "namespace": .metadata.namespace}'  | jq -s 
      register: cloud_creds_error_out

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print cloud cred secret list output'
      ansible.builtin.debug:
        var: item
        verbosity: 2
      loop: "{{ cloud_creds_error_out.stdout_lines }}"

    - name: '{{ ansible_name_module }} | assert | there is a default storage class object '
      ansible.builtin.assert:
        that:
          - cloud_creds_error_out is defined
          - cloud_creds_error_out.stdout is defined
          - cloud_creds_error_out.stdout != ''
          - "'are failing to sync' in cloud_creds_error_out.stdout"
        msg: "The cloud credentials operator need to be degraded to run this playbook."

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} get | retrieve AWS cloud credential secrets '
      ansible.builtin.shell: >
        {{ openshift_cli }} -n openshift-cloud-credential-operator get credentialsRequest -o json | jq -r '.items[] | select(.spec.providerSpec.kind=="AWSProviderSpec") | select(.status.conditions[]?.message | contains("failed to grant creds")) | {"name": .metadata.name, "namespace": .metadata.namespace}'  | jq -s 
      register: failing_cloud_creds_secret_out

    - name: '{{ ansible_name_module }} | assert | there failing secret with failed to grant creds error '
      ansible.builtin.assert:
        that:
          - failing_cloud_creds_secret_out is defined
          - failing_cloud_creds_secret_out.stdout is defined
          - failing_cloud_creds_secret_out.stdout != ''
        msg: "There need to be failing cloud credential secret with the failed to grant creds error before proceeding ."

    - name: '{{ ansible_name_module }} | set_fact | cloud_creds_secret_list fact '
      ansible.builtin.set_fact:
        cloud_creds_secret_list: "{{ failing_cloud_creds_secret_out.stdout | from_json | list  }}"

    - name: '{{ ansible_name_module }} | Process failing to sync AWS cloud credential errors using the controller'
      when:
        - not recreate_cloud_creds_secrets is defined or not recreate_cloud_creds_secrets | bool
      block:
        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} delete| failing cloud cred secrets '
          ansible.builtin.shell: >
            {{ openshift_cli }} delete secret  {{ item.name }}  -n {{ item.namespace }} 
          loop: "{{ cloud_creds_secret_list }}"
          register: cloud_creds_secret_deleted

        - name: '{{ ansible_name_module }} | wait_for | wait for controller to process the secret replacement'
          ansible.builtin.wait_for:
            timeout: '{{ (cloud_creds_secret_deleted.results | length )* 300}}' 
          delegate_to: localhost

    - name: '{{ ansible_name_module }} | Process failing to sync AWS cloud credential errors '
      when:
        - recreate_cloud_creds_secrets is defined 
        - recreate_cloud_creds_secrets | bool
      block:
        - name: '{{ ansible_name_module }} | set_fact | set cred dir path '
          ansible.builtin.set_fact:
            extracted_cred_dir: "{{ staging_dir | default('/tmp', true)}}/kube-system-creds"

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | create kube system aws cred dir'
          ansible.builtin.file: 
            path: "{{ extracted_cred_dir }}"
            state: directory
            mode: 0777

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} extract | kube system aws creds '
          ansible.builtin.command: >
            {{ openshift_cli }}  extract secret/aws-creds -n kube-system  --confirm  --to {{ extracted_cred_dir }}
          register: kube_sys_aws_cred_extracted 

        - name: '{{ ansible_name_module }} | set_fact | set cred info file path '
          ansible.builtin.set_fact:
            extracted_file_access_key: "{{ extracted_cred_dir }}/aws_access_key_id"
            extracted_file_secret_key: "{{ extracted_cred_dir }}/aws_secret_access_key"
            credential_file_path: "{{ extracted_cred_dir }}/credential"

        - name: '{{ ansible_name_module }} | set_fact | AWS cred files '
          ansible.builtin.set_fact:
            aws_access_key_cred: "{{ lookup('ansible.builtin.file', extracted_file_access_key) }}"
            aws_access_secret_cred: "{{ lookup('ansible.builtin.file', extracted_file_secret_key) }}"

        - name: '{{ ansible_name_module }} | command: ansible.builtin.shell | create credential file '
          ansible.builtin.shell: > 
             echo -e '[default]\naws_access_key_id="{{ aws_access_key_cred }}"\naws_secret_access_key="{{ aws_access_secret_cred }}"' > {{ credential_file_path }}
          register: kube_sys_aws_cred_file_created 

        - name: '{{ ansible_name_module }} | set_fact | AWS cred files '
          ansible.builtin.set_fact:
            aws_access_credential_file: "{{ lookup('ansible.builtin.file', credential_file_path) }}"
          when:
            - kube_sys_aws_cred_file_created is defined

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} create | replace cloud credt secrets '
          ansible.builtin.shell: >
            {{ openshift_cli }} create secret generic {{ cred_name }} --from-literal=aws_access_key_id={{ aws_access_key_cred }}\
               --from-literal=aws_secret_access_key={{ aws_access_secret_cred }} \
               --from-file=credentials={{ credential_file_path }} -n {{ cred_namespace }} \
               --dry-run=client -o yaml | oc replace -f - -n {{  cred_namespace }}
          loop: "{{ cloud_creds_secret_list }}"
          when:
            - not skip_credential_file is defined or not skip_credential_file | bool 
          vars:
            cred_name: "{{ item.name }}"
            cred_namespace: "{{ item.namespace }}"
          register: cloud_cred_secret_replaced 


        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} create | replace cloud credt secrets '
          ansible.builtin.shell: >
            {{ openshift_cli }} create secret generic {{ cred_name }} --from-literal=aws_access_key_id={{ aws_access_key_cred }}\
               --from-literal=aws_secret_access_key={{ aws_access_secret_cred }} \
               -n {{ cred_namespace }} \
               --dry-run=client -o yaml | oc replace -f - -n {{  cred_namespace }}
          loop: "{{ cloud_creds_secret_list }}"
          when:
            - skip_credential_file is defined
            - skip_credential_file | bool 
          vars:
            cred_name: "{{ item.name }}"
            cred_namespace: "{{ item.namespace }}"
          register: cloud_cred_secret_replaced_no_cred_file 

