- name: ' Konductor | Provision UPI Infra | harden-cluster-using-compliance-operator.yml'
  hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'
  vars:
    module: "Remediate findings"
    ansible_name_module: " Post Cluster Installation | Harden Cluster | {{ module }}"
  pre_tasks:
    - name: '{{ ansible_name_module }} | import_role | OCP cluster login'
      import_role:
        name: ocp-cluster-login 

  tasks:
    - name: '{{ ansible_name_module }} | Configure compliance scan if not already done'
      when:
        - configure_compliance_scan is defined
        - configure_compliance_scan | bool
      block:
        - name: '{{ ansible_name_module }} | get moderate profile if platform_node_profile_name not provided'
          shell: >
            {{ openshift_cli }} get profiles.compliance.openshift.io --no-headers | grep -i "moderate" | awk '{print $1}' | sort
          when:
            - not platform_node_profile_name is defined or platform_node_profile_name == ''
          register: default_profiles

        - name: '{{ ansible_name_module }} | set_fact | default scan profile vars'
          set_fact:
            platform_node_profile_name: "{{ default_profiles.stdout_lines[1] }}"
            platform_profile_name: "{{ default_profiles.stdout_lines[0] }}"
            compliance_name: "nist-moderate"
          when:
            - not platform_node_profile_name is defined or platform_node_profile_name == ''
            - default_profiles is defined
            - default_profiles.stdout_lines is defined
            - default_profiles.stdout_lines | length > 0

        - name: '{{ ansible_name_module }} | | get storage class if not provided'
          shell: >
            {{ openshift_cli }} get storageclass --no-headers | grep -i "{{ storage_class_type | d('kubernetes.io/aws-ebs') }}" | awk '{print $1}'
          register: default_sc

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | Render default ScanSetting CR'
          template:
            src: "templates/scansetting-cr.yaml.j2"
            dest: "{{ staging_dir | d('/tmp', true) }}/scansetting-cr.yaml"
            force: yes
          vars:
            cluster_storage_class: "{{ default_sc.stdout }}"

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | default scan setting '
          command: >
            {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/scansetting-cr.yaml -n openshift-compliance
          register: scansetting_applied

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | Render default ScanSettingBinding CR'
          vars:
            profile: "{{ item }}"
          template:
            src: "templates/scansettingbinding-cr.yaml.j2"
            dest: "{{ staging_dir | d('/tmp', true) }}/scansettingbinding-cr-{{ item }}.yaml"
            force: yes
          loop: "{{ default_profiles.stdout_lines }}"

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | default scan setting binding'
          command: >
            {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/scansettingbinding-cr-{{ item }}.yaml -n openshift-compliance
          loop: "{{ default_profiles.stdout_lines }}"
          register: scansetting_applied

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | get automatable findings results'
      shell: >
        {{ openshift_cli }} get compliancecheckresults -l 'compliance.openshift.io/check-status in (FAIL),compliance.openshift.io/automated-remediation' -n openshift-compliance --no-headers | awk '{print $1}'
      register: compliance_findings_automatable

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | get manual findings '
      shell: >
        {{ openshift_cli }} get compliancecheckresults -l 'compliance.openshift.io/check-status in (FAIL),!compliance.openshift.io/automated-remediation' -n openshift-compliance --no-headers | awk '{print $1}'
      register: compliance_findings_manual

#################### Get and apply remediations #################################
    - name: '{{ ansible_name_module }} | Apply Scan Remediation in case the auto apply was not set'
      when:
        - remediate_compliance_scan is defined
        - remediate_compliance_scan | bool
      block:
        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | get automatable remediations'
          shell: >
            {{ openshift_cli }} get complianceremediations.compliance.openshift.io -n openshift-compliance --no-headers | awk '{print $1}'
          register: compliance_findings_remediations

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | apply automatable findings '
          command: >
            {{ openshift_cli }} patch complianceremediations.compliance.openshift.io {{ item }} --type merge -p '{"spec":{"apply": true}}' -n openshift-compliance
          loop: "{{ compliance_findings_remediations.stdout_lines }}"
          when:
            - compliance_findings_remediations is defined
            - compliance_findings_remediations.stdout_lines is defined
            - compliance_findings_remediations.stdout_lines | length > 0 
          register: compliance_findings_remediated

 #################### Get and annotate scans to enable rescans #################################
    - name: '{{ ansible_name_module }} | Apply Scan Remediation in case the auto apply was not set'
      when:
        - enable_compliance_rescan is defined
        - enable_compliance_rescan | bool
      block:
        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | get compliance scans'
          shell: >
            {{ openshift_cli }} get compliancescans.compliance.openshift.io -n openshift-compliance --no-headers | awk '{print $1}'
          register: compliance_scans

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | annotate scans '
          command: >
            {{ openshift_cli }} annotate compliancescans.compliance.openshift.io {{ item }} compliance.openshift.io/rescan= -n openshift-compliance 
          loop: "{{ compliance_scans.stdout_lines }}"
          when:
            - compliance_scans is defined
            - compliance_scans.stdout_lines is defined
            - compliance_scans.stdout_lines | length > 0
          register: compliance_rescan_enabled

#################### Patch compliance scan setting to perform auto remidiation by default  #################################
    - name: '{{ ansible_name_module }} | Patch ScanSetting to do auto Remediation in case the auto apply was not set'
      when:
        - enable_auto_remediate is defined
        - enable_auto_remediate | bool
      block:
        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | get compliance scans'
          shell: >
            {{ openshift_cli }} get scansettings.compliance.openshift.io -n openshift-compliance --no-headers | awk '{print $1}'
          register: compliance_scansettings

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | patch scansettings 1 of 2'
          command: >
            {{ openshift_cli }} patch scansettings.compliance.openshift.io {{ item }} --type merge -p '{"autoUpdateRemediations": true}' -n openshift-compliance
          loop: "{{ compliance_scansettings.stdout_lines }}"
          when:
            - compliance_scansettings is defined
            - compliance_scansettings.stdout_lines is defined
            - compliance_scansettings.stdout_lines | length > 0
          register: compliance_scansettings_patched_autoupdate

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | patch scansettings 2 of 2'
          command: >
            {{ openshift_cli }} patch scansettings.compliance.openshift.io {{ item }} --type merge -p '{"autoApplyRemediations": true}' -n openshift-compliance
          loop: "{{ compliance_scansettings.stdout_lines }}"
          when:
            - compliance_scansettings is defined
            - compliance_scansettings.stdout_lines is defined
            - compliance_scansettings.stdout_lines | length > 0
          register: compliance_scansettings_patched_autoapply

