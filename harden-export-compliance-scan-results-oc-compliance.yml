- name: ' Konductor | Provision UPI Infra | harden-export-compliance-scan-results-oc-compliance.yml'
  hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3
    module: "Extract Scan Results"
    ansible_name_module: " Post Cluster Installation | Harden Cluster | {{ module }}"
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'

  pre_tasks:
    - name: '{{ ansible_name_module }} | import_role | OCP cluster login'
      import_role:
        name: ocp-cluster-login
    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} get | get scansettingbindings'
      shell: >
        {{ openshift_cli }} get scansettingbinding.compliance.openshift.io --no-headers -n openshift-compliance | awk '{print $1}'
      ignore_errors: yes
      register: scansettingbinding_exist

    - name: '{{ ansible_name_module }} | assert | ensure there are scansettingbindings'
      assert:
        that:
          - scansettingbinding_exist is defined
          - scansettingbinding_exist.rc is defined
          - scansettingbinding_exist.rc == 0 
          - scansettingbinding_exist.stdout_lines is defined
          - scansettingbinding_exist.stdout_lines | length > 0 
        msg: "A scansettingbindings is required to run scan and export results. Please configure one"

  tasks:
    - name: '{{ ansible_name_module }} | Retrieve cluster_name'
      command: >
        {{ openshift_cli }} get -o jsonpath='{.status.infrastructureName}{"\n"}' \
           infrastructure cluster
      register: cluster_name

    - name: '{{ ansible_name_module }} | set_fact | Set the Scan result export directory prefix'
      set_fact:
        scan_export_dir_prefix: "{{ cluster_name.stdout }}-{{ lookup('pipe', 'date +%Y%m%d') }}"
      delegate_to: localhost

    - name: '{{ ansible_name_module }} | set_fact | Set the Scan result export directory when undefined'
      set_fact:
        dir_scan_result_export: "/tmp/scan-results"
      when:
        - not dir_scan_result_export is defined or dir_scan_result_export == ''
      delegate_to: localhost

    - name: '{{ ansible_name_module }} | file:directory | Ensure the Scan result export directory does not exist'
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ dir_scan_result_export }}/{{ scan_export_dir_prefix }}"
        - "{{ dir_scan_result_export }}"

    - name: '{{ ansible_name_module }} | file:directory | Ensure the Scan result export directory exist'
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - "{{ dir_scan_result_export }}/{{ scan_export_dir_prefix }}"

    - name: '{{ ansible_name_module }} | podman run | extract oc compliance command'
      become: yes
      shell: >
        podman run --authfile {{ registry_auth_config }} --rm --entrypoint /bin/cat {{ scan_results_export_image }} \
          /usr/bin/oc-compliance > {{ scan_results_binary_path }}
      register: scan_results_binary_extracted

    - name: '{{ ansible_name_module }} | file  | set permission on binary'
      become: yes
      file:
        path: "{{ scan_results_binary_path }}"
        mode: 0755

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | create export pods'
      shell: >
        {{ scan_results_binary_path }} fetch-raw scansettingbindings \
          {{ item }} -i {{ scan_results_image }}\
            -o  {{ dir_scan_result_export }}/{{ scan_export_dir_prefix }} \
             -n openshift-compliance
      loop: "{{ scansettingbinding_exist.stdout_lines }}"
      register: raw_scan_results_exported

    - name: '{{ ansible_name_module }} | unpack the bzip file if applicable '
      when:
        - unpack_scan_arf is defined
        - unpack_scan_arf | bool
        - raw_scan_results_exported is defined
        - raw_scan_results_exported.results is defined
        - raw_scan_results_exported.results | length > 0
      block:
        - name: '{{ ansible_name_module }} | command:which | check if bzip2 is installed '
          command: which bzcat
          ignore_errors: yes
          failed_when:
            - bzip_binary_check.rc > 0
            - "not 'no bzip2' in bzip_binary_check.stderr"
          register: bzip_binary_check

        - name: '{{ ansible_name_module }} | assert | ensure that bzip2 is installed '
          assert:
            that:
              - bzip_binary_check is defined
              - bzip_binary_check.rc is defined
              - bzip_binary_check.rc == 0
            msg: "The bzip2 binary is required on the controller to unpack the files"

        - name: '{{ ansible_name_module }} | find | locate bzip files '
          find:
            paths: "{{ dir_scan_result_export }}/{{ scan_export_dir_prefix }}"
            recurse: yes
            patterns: '*.bzip2'
          register: scan_arf_bzip_files

        - name: '{{ ansible_name_module }} | find | locate bzip file dirs '
          find:
            paths: "{{ dir_scan_result_export }}/{{ scan_export_dir_prefix }}"
            recurse: no
            file_type: directory
          register: scan_arf_bzip_dirs

        - name: '{{ ansible_name_module }} | file:directory | Ensure the Scan result bzip directory exist'
          file:
            path: "{{ dir_scan_result_export }}/{{ scan_export_dir_prefix }}/bzip/{{ item.path.split('/')[-1] }}"
            state: directory
            mode: 0755
          loop: "{{ scan_arf_bzip_dirs.files }}"
          when:
            - scan_arf_bzip_dirs.files is defined
            - "not 'lost' in item.path.split('/')[-1]"
          register: scan_arf_bzip_dirs_created

        - name: '{{ ansible_name_module }} | shell:bzcat | Extract bzip2 files '
          shell: >
            bzcat {{ item.path }} \
              > {{ dir_scan_result_export }}/{{ scan_export_dir_prefix }}/bzip/{{ (item.path | dirname).split('/')[-1] }}/{{ (item.path | basename).split('.bzip2')[0] }}
          loop: "{{ scan_arf_bzip_files.files }}"
          register: scan_arf_unpack_out

        - name: '{{ ansible_name_module }} | file:directory | Ensure the Scan result oscap report directory exist'
          file:
            path: "{{ dir_scan_result_export }}/{{ scan_export_dir_prefix }}/report/{{ item.path.split('/')[-1] }}"
            state: directory
            mode: 0755
          loop: "{{ scan_arf_bzip_dirs.files }}"
          when:
            - scan_arf_bzip_dirs.files is defined
            - "not 'lost' in item.path.split('/')[-1]"
          register: scan_arf_report_dirs_created

        - name: '{{ ansible_name_module }} | command:which | check if oscap-report is installed '
          command: which oscap
          ignore_errors: yes
          failed_when:
            - oscap_binary_check.rc > 0
            - "not 'no oscap-report' in oscap_binary_check.stderr"
          register: oscap_binary_check

        - name: '{{ ansible_name_module }} | find | locate arf files '
          find:
            paths: "{{ dir_scan_result_export }}/{{ scan_export_dir_prefix }}/bzip/"
            recurse: yes
            patterns: '*.xml'
          register: scan_arf_files

        - name: '{{ ansible_name_module }} | shell:oscap | Generate oscap report files '
          shell: >
            {{ oscap_binary_check.stdout }} xccdf generate report {{ item.path }} \
              > "{{ dir_scan_result_export }}/{{ scan_export_dir_prefix }}/report/{{ (item.path | dirname).split('/')[-1] }}/{{ (item.path | basename).split('.xml')[0] }}-report.html"
          loop: "{{ scan_arf_files.files }}"
          when:
            - oscap_binary_check is defined
            - oscap_binary_check.rc is defined
            - oscap_binary_check.rc == 0
          register: scan_arf_unpack_out

    - name: '{{ ansible_name_module }} | command:tar | create an archive of exported results'
      command: >
         tar -czf "{{ dir_scan_result_export }}/scan-results-{{ scan_export_dir_prefix }}.tar.gz" {{ dir_scan_result_export }}/{{ scan_export_dir_prefix }}
      args:
        warn: false
      when:
        - raw_scan_results_exported is defined
        - raw_scan_results_exported.results is defined
        - raw_scan_results_exported.results | length > 0
      register: scan_results_files_archived
