- name: 'Configure etcd Backup Cleanup Cron Job  | configure-etcd-backup-cleanup-cronjob.yml'
  hosts: localhost
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'
    - 'vars/infra.yml'
  vars:
    module: "configure etcd backup cleanup cron"
    ansible_name_module: "Configure ETCD Backup Cleanup Cron Job | {{ module }}"

  pre_tasks:
    - name: Install required pip library
      pip:
        name: openshift
        state: present

    - name: Ensure Proper Python dependency is installed for Openshift
      python_requirements_facts:
        dependencies:
          - openshift
          - requests

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          --token {{ ocp_cluster_token }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      when:
        - ocp_cluster_token is defined and ocp_cluster_token != ""
      register: login_out

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          -u {{ ocp_cluster_user }} \
          -p {{ ocp_cluster_user_password }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      when:
        - not ocp_cluster_token is defined or ocp_cluster_token == ""
      register: login_out

  tasks:
    - name: '{{ ansible_name_module }} | Create etcd cleanup Namespace'
      block:
        ##### Adding this to bypass restrictions on creating project with names starting with openshift  #####
        - name: '{{ ansible_name_module }} |  Create etcd backup Namespace'
          ansible.builtin.command: >
            {{ openshift_cli }} create namespace '{{ platform_infra_ns }}'
          failed_when: "etcd_backup_ns_created.rc >=1 and not ' already exists' in etcd_backup_ns_created.stderr"
          when:
            - "'openshift' in platform_infra_ns"
          register: etcd_backup_ns_created

        - name: '{{ ansible_name_module }} |  Create etcd backup Namespace'
          ansible.builtin.command: >
            {{ openshift_cli }} new-project '{{ platform_infra_ns }}' \
              --display-name='{{ platform_infra_ns_description }}' \
              --description='{{ platform_infra_ns_description }}'
          failed_when: "etcd_backup_ns_created.rc >=1 and not ' already exists' in etcd_backup_ns_created.stderr"
          when:
            - "not 'openshift' in platform_infra_ns"
          register: etcd_backup_ns_created

    - name:  '{{ ansible_name_module }} | create service account'
      ansible.builtin.command: >
        {{ openshift_cli }} create serviceaccount {{ etcd_backup_service_account }} -n {{ platform_infra_ns }}
      failed_when: "sa_created.rc > 0 and not ' already exists' in sa_created.stderr"
      register: sa_created

       ### You need to have cluster admin role to run this task
    - name: Grant SCC Privilege to the etcd cleanup service account
      when:
         - add_privileged_scc_to_etcd_backup_sa is defined
         - add_privileged_scc_to_etcd_backup_sa | default('false') | bool
      block:
      - name: Grant Privileged SCC access
        ansible.builtin.command: >
          {{ openshift_cli }} adm policy \
            add-scc-to-user {{ scc_name }} \
            'system:serviceaccount:{{ platform_infra_ns }}:{{ item }}'
        failed_when:
          - privileged_access_granted.rc >= 1
          - not 'AlreadyExists' in privileged_access_granted.stderr
        with_items:
          - "{{ etcd_backup_service_account }}"
        when:
          - add_privileged_scc_to_etcd_backup_sa | bool
          - item != ""
        register: privileged_access_granted
        tags: privileged

    - name: '{{ ansible_name_module }} | Configure etcd backup '
      block:
        - name: '{{ ansible_name_module }} | Retrieve Infrastructure ID'
          ansible.builtin.command: >
            {{ openshift_cli }} get -o jsonpath='{.status.infrastructureName}{"\n"}' infrastructure cluster
          register: cluster_id

        - name: generate list of control plane (master) nodes
          ansible.builtin.command: oc get nodes -l node-role.kubernetes.io/master= -o custom-columns=:..metadata.labels.'kubernetes\.io/hostname'
          changed_when: false
          register: master_nodes

        - ansible.builtin.set_fact:
            master_node_list: '{{ master_nodes.stdout_lines|select() }}'

        - ansible.builtin.debug:
            var: master_node_list

        - name: '{{ ansible_name_module }} | Set etcd_cleanup_cron_job_schedule_expression'
          ansible.builtin.set_fact:
            etcd_cleanup_cron_job_schedule_expression: "{{ ansible_date_time.minute | int +2 }} {{ ansible_date_time.hour }} * * *"
          when:
            - not etcd_cleanup_cron_job_schedule_expression is defined or etcd_cleanup_cron_job_schedule_expression == ''

        - name: '{{ ansible_name_module }} | template | Render Etcd cleanup cronjob'
          ansible.builtin.template:
            src: "templates/etcd-cleanup-master-cronjob.j2"
            dest: "{{ staging_dir | d('/tmp', true) }}/{{ cluster_id.stdout }}-{{ container_name }}-{{ item }}-cronjob.yaml"
            force: yes
          loop: "{{ master_node_list }}"
          register: etcd_cleanup_cronjob_copied

        - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} apply | create Etcd cleanup cron job'
          ansible.builtin.command: >
            {{ openshift_cli }} apply -f {{ item.dest }}
          when:
            - etcd_cleanup_cronjob_copied is defined
            - etcd_cleanup_cronjob_copied.results is defined
            - etcd_cleanup_cronjob_copied.results | length > 0
            - item.dest is defined
            - item.state is defined
            - "'file' in item.state"
          loop: "{{ etcd_cleanup_cronjob_copied.results }}"
          register: etcd_cleanup_cron_created

