- name: ' Configure Keycloak Provider | configure-registry-config-workers.yml'
  hosts: localhost
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'
  vars:
    module: "Fix Worker nodes registries conf"
    ansible_name_module: "Configure Registries | {{ module }}"
  pre_tasks:
    - name: Install required pip library
      pip:
        name: openshift
        state: present

    - name: Ensure Proper Python dependency is installed for Openshift
      python_requirements_facts:
        dependencies:
          - openshift
          - requests
    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          --token {{ ocp_cluster_token }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      when:
        - ocp_cluster_token is defined and ocp_cluster_token != ""
      register: login_out

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          -u {{ ocp_cluster_user }} \
          -p {{ ocp_cluster_user_password }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      when:
        - not ocp_cluster_token is defined or ocp_cluster_token == ""
      register: login_out

  tasks:
    - name: '{{ ansible_name_module }} | Retrieve first master'
      shell: >
        {{ openshift_cli }} get nodes --no-headers | grep master | head -n 1 | awk '{print $1}'
      register: master_names

    - name: '{{ ansible_name_module }} | get master registry.conf'
      become: yes
      shell: >
        ssh -oStrictHostKeyChecking=no -i {{ master_node_ssh_key_file | default('/root/platform/secrets/ssh/id_rsa_kubeadmin', false) }} core@{{ master_names.stdout }} 'cat /etc/containers/registries.conf'
      register: master_reg_conf

    - name: '{{ ansible_name_module }} | template | Copy unsupported config to staging location'
      vars:
        registry_conf_data: "{{ master_reg_conf.stdout }}"
      template:
        src: "templates/unsupported-operators-mc.yml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/worker-registry-conf-fix-mc.yml"
        force: yes
      when:
        - master_reg_conf is defined
        - master_reg_conf.stdout is defined 
        - master_reg_conf.stdout != ''
      register: wrcmc_copied

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | deploy unsupported config '
      command: >
        {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/worker-registry-conf-fix-mc.yml
      when:
        - wrcmc_copied is defined
      register: wrcmc_deployed

