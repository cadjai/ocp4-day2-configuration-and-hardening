---
# tasks file for config-disconnected-OLM
- name: '{{ ansible_name_module }} | Install required pip library'
  pip:
    name: openshift
    state: present

- name: '{{ ansible_name_module }} | Ensure Proper Python dependency is installed for Openshift'
  python_requirements_facts:
    dependencies: 
      - openshift
      - requests 

- name: '{{ ansible_name_module }} | shell | Discover oc install directory '
  shell: which oc
  register: oc_location

- name: '{{ ansible_name_module }} | set_fact | Set openshift_cli  '
  set_fact:
    openshift_cli: "{{ oc_location.stdout }}"
  when:
    - not openshift_cli is defined or openshift_cli == ""
    - oc_location is defined
    - oc_location.stdout is defined and not oc_location.stdout == ""

- name: '{{ ansible_name_module }} | Authenticate with the API'
  command: >
    {{ openshift_cli }} login \
      -u {{ ocp_cluster_admin_user }} \
      -p {{ ocp_cluster_admin_password }} \
      --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port }}
  register: login_out

- name: '{{ ansible_name_module }} | Configure OperatorHub for disconnected install'
  block:
    - name: '{{ ansible_name_module }} | template | Copy OperatorHub template to staging location'
      template: 
        src: "patched-operatorhub.yml.j2"
        dest: "{{ staging_dir }}/{{ disconnected_operatorhub_config }}"
      register: oph_copied

    - name: '{{ ansible_name_module }} | command | Patch disconnected OperatorHub'
      command: >
        {{ openshift_cli }} apply -f {{ staging_dir }}/{{ disconnected_operatorhub_config }}  \
      register: oph_updated

- name: '{{ ansible_name_module }} | Configure Operator Image Content source for disconnected install'
  block:
    - name: '{{ ansible_name_module }} | template | Copy ImageContentSource to staging location'
      copy: 
        src: "{{ item.value.content_source_file }}"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ item.key }}-{{ item.value.content_source_file | basename }}"
      with_dict:
        - "{{ operator_catalogs_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool == true
        - item.value.catalog_name is defined and item.value.catalog_name != ""
        - item.value.catalog_index is defined and item.value.catalog_index != ""
        - item.value.content_source_file is defined and item.value.content_source_file != ""c
      register: op_ics_copied

    - name: '{{ ansible_name_module }} | command | Apply Operator Image Content Source'
      command: >
        {{ openshift_cli }} apply -f {{ staging_dir }}/{{ item.key }}-{{ item.value.content_source_file | basename }} 
      register: op_ics_updated

- name: '{{ ansible_name_module }} | Configure Catalog Source for disconnected install'
  block:
    - name: '{{ ansible_name_module }} | template | Copy CatalogSource template to staging location'
      template: 
        src: "catalog-source.yaml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ item.key }}-catalog-source-config.yml"
      with_dict:
        - "{{ operator_catalogs_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool == true
        - item.value.catalog_name is defined and item.value.catalog_name != ""
        - item.value.catalog_index is defined and item.value.catalog_index != ""
      vars:
        operator_catalog_name: "{{ item.value.catalog_name }}"
        operator_catalog_index: "{{ item.value.catalog_index }}"
        operator_catalog_index_tag: "{{ item.value.catalog_index_tag }}"
        operator_catalog_publisher: "{{ item.value.catalog_publisher }}"
      register: op_cs_copied

    - name: '{{ ansible_name_module }} | command | Deploy Catalog Source'
      command: >
        {{ openshift_cli }} apply -f {{ staging_dir }}/{{ item.key }}-catalog-source-config.yml
      register: op_cs_updated
