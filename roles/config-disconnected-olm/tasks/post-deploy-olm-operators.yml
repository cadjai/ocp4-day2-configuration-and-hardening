---
- name: Install required pip library
  pip:
    name: openshift
    state: present

- name: Ensure Proper Python dependency is installed for Openshift
  python_requirements_facts:
    dependencies: 
      - openshift
      - requests 

- name: Authenticate with the API
  command: >
    {{ openshift_cli }} login \
      -u {{ ocp_cluster_user_user }} \
      -p {{ ocp_cluster_user_password }} \
      --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
  register: login_out

- name: '{{ ansible_name_module }} | Deploy Operators'
          #failed_when: "operator_ns_created.results[key_cnt].rc >=1 and not ' already exists' in operator_ns_created.results[key_cnt].stderr"
  block:
    ##### Adding this to bypass restrictions on creating project with names starting with openshift  #####
    - name: '{{ ansible_name_module }} | Deploy Operators | Create Operator Namespace'
      command: >
        {{ openshift_cli }} create namespace '{{ item.value.deploy_namespace }}'
      failed_when: "operator_ns_created.rc >=1 and not ' already exists' in operator_ns_created.stderr"
      with_dict: "{{ operators_to_deploy }}"
      loop_control:
        index_var: key_cnt
      when:
        - item.key is defined and item.key != ""
        - item.value.group_name is defined and item.value.group_name != ""
        - item.value.deploy is defined and item.value.deploy | bool
        - item.value.create_namespace is defined and item.value.create_namespace | bool
        - item.value.deploy_namespace is defined and item.value.deploy_namespace != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - "'openshift' in item.value.deploy_namespace"
      register: operator_ns_created

    - name: '{{ ansible_name_module }} | Deploy Operators | Create Operator Namespace'
      command: >
        {{ openshift_cli }} new-project '{{ item.value.deploy_namespace }}' \
          --display-name='{{ item.value.deploy_namespace_description }}' \
          --description='{{ item.value.deploy_namespace_description }}'
      failed_when: "operator_ns_created.rc >=1 and not ' already exists' in operator_ns_created.stderr"
      with_dict: "{{ operators_to_deploy }}"
      loop_control:
        index_var: key_cnt
      when:
        - item.key is defined and item.key != ""
        - item.value.group_name is defined and item.value.group_name != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.deploy_namespace is defined and item.value.deploy_namespace != ""
        - item.value.deploy_namespace_description is defined and item.value.deploy_namespace_description != ""
        - "not 'openshift' in item.value.deploy_namespace"
      register: operator_ns_created

    - name: '{{ ansible_name_module }} | Deploy Operators | Check if Operator group already exist'
      shell: >
        {{ openshift_cli }} get OperatorGroup --all-namespaces --no-headers | grep '{{ item.value.deploy_namespace }}' | grep  '{{ item.value.group_name }}'
      ignore_errors: yes
      with_dict:
        - "{{ operators_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.group_name is defined and item.value.group_name != ""
        - item.value.deploy is defined and item.value.deploy | bool
        - item.value.deploy_namespace is defined and item.value.deploy_namespace != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.deploy_namespace_description is defined and item.value.deploy_namespace_description != ""
      register: operator_group_exist

    - name: '{{ ansible_name_module }} | Deploy Operators | Check if Operator group already exist'
      set_fact:
        op_group_exist: "{{ op_group_exist | d({}) | combine({ item.item.key: 'false' if item.rc == 0 else 'true' }) }}"
      with_items: "{{ operator_group_exist.results }}"
      when:
        - not item.skipped is defined
      register: op_group_fact

    - name: '{{ ansible_name_module }} | template | Copy OperatorGroup Config to staging location'
      template: 
        src: "OperatorGroup.yml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ item.key }}-OperatorGroup.yml"
      with_dict:
        - "{{ operators_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.group_name is defined and item.value.group_name != ""
        - item.value.deploy is defined and item.value.deploy | bool
        - item.value.deploy_namespace is defined and item.value.deploy_namespace != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.deploy_namespace_description is defined and item.value.deploy_namespace_description != ""
        - item.value.create_catalog_group is defined and item.value.create_catalog_group | bool
        - op_group_exist[item.key] is defined and op_group_exist[item.key] | bool
      vars: 
        operator_group_name: "{{ item.value.group_name }}"
        operator_deploy_namespace: "{{ item.value.deploy_namespace }}"
        operator_target_namespace: "{{ item.value.target_namespace }}"
        operator_name: "{{ item.key }}"
      register: op_csc_copied

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | deploy operatorgroup '
      command: >
        {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/{{ item.key }}-OperatorGroup.yml 
      with_dict:
        - "{{ operators_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.group_name is defined and item.value.group_name != ""
        - item.value.deploy is defined and item.value.deploy | bool
        - item.value.deploy_namespace is defined and item.value.deploy_namespace != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.deploy_namespace_description is defined and item.value.deploy_namespace_description != ""
        - item.value.create_catalog_group is defined and item.value.create_catalog_group | bool
        - op_group_exist[item.key] is defined and op_group_exist[item.key] | bool
      register: op_csc_deployed

    - name: '{{ ansible_name_module }} | template | Copy Operator Catalog Source to staging location if applicable'
      template:
        src: "templates/CatalogSource.yml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ item.key }}-CatalogSource.yml"
      with_dict:
        - "{{ operators_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.catalog_name is defined and item.value.catalog_name != ""
        - item.value.deploy is defined and item.value.deploy | bool
        - item.value.deploy_namespace is defined and item.value.deploy_namespace != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.create_catalog is defined and item.value.create_catalog | bool
      vars:
        operator_catalog_name: "{{ item.value.catalog_name }}"
        operator_deploy_namespace: "{{ item.value.deploy_namespace }}"
        operator_target_namespace: "{{ item.value.target_namespace }}"
        operator_name: "{{ item.key }}"
        operator_catalog_index: "{{ item.value.index_image | d(omit) }}"
        operator_catalog_index_tag: "{{ item.value.index_image_tag | d(omit) }}"
      register: op_sub_copied

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | deploy operator CatalogSource'
      command: >
        {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/{{ item.key }}-CatalogSource.yml
      with_dict:
        - "{{ operators_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.catalog_name is defined and item.value.catalog_name != ""
        - item.value.deploy is defined and item.value.deploy | bool
        - item.value.deploy_namespace is defined and item.value.deploy_namespace != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.create_catalog is defined and item.value.create_catalog | bool
      register: op_sub_deployed

    - name: '{{ ansible_name_module }} | template | Copy Operator Subscripion to staging location'
      template: 
        src: "Subscription.yml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ item.key }}-Subscription.yml"
      with_dict:
        - "{{ operators_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.catalog_name is defined and item.value.catalog_name != ""
        - item.value.deploy is defined and item.value.deploy | bool
        - item.value.deploy_namespace is defined and item.value.deploy_namespace != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.deploy_namespace_description is defined and item.value.deploy_namespace_description != ""
      vars: 
        operator_catalog_name: "{{ item.value.catalog_name }}"
        operator_deploy_namespace: "{{ item.value.deploy_namespace }}"
        operator_target_namespace: "{{ item.value.target_namespace }}"
        operator_name: "{{ item.key }}"
      register: op_sub_copied

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | deploy operator subscription'
      command: >
        {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/{{ item.key }}-Subscription.yml
      with_dict:
        - "{{ operators_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.catalog_name is defined and item.value.catalog_name != ""
        - item.value.deploy is defined and item.value.deploy | bool
        - item.value.deploy_namespace is defined and item.value.deploy_namespace != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.deploy_namespace_description is defined and item.value.deploy_namespace_description != ""
      register: op_sub_deployed

