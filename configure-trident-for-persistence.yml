- name: ' Configure Trident Storage  | configure-trident-for-persistence.yml'
  hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'
  vars:
    module: "Configure Trident for persistence"
    ansible_name_module: " Post Cluster Installation | Configure Trident Driver | {{ module }}"
  pre_tasks:
    - name: Install required pip library
      pip:
        name: openshift
        state: present

    - name: Ensure Proper Python dependency is installed for Openshift
      python_requirements_facts:
        dependencies:
          - openshift
          - requests
 
    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          -u {{ ocp_cluster_user }} \
          -p {{ ocp_cluster_user_password }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      register: login_out

    - name: '{{ ansible_name_module }} | Ensure required variables are set'
      when:
        - not use_default_manifests is defined or not use_default_manifests | bool
      block:
        - assert:
            that:
              - trident_binary_file is defined and trident_binary_file != ''
            msg: " the Trident driver archive location on the controller node is required and non empty"
          when:
            - not trident_remote_url is defined or trident_remote_url == ''
        - assert:
            that:
              - trident_remote_url is defined and trident_remote_url != ''
            msg: " the Trident driver archive remote URL location is required and non empty with its protocol (e.g. http)"
          when:
            - not trident_binary_file is defined or trident_binary_file == ''

  tasks:
    - name: '{{ ansible_name_module }} | Download Trident if applicable'
      when:
        - not use_default_manifests is defined or not use_default_manifests | bool
      block:
        - name: '{{ ansible_name_module }} | Download Trident Driver if applicable'
          when:
            - trident_remote_url is defined
            - trident_remote_url != '' 
          block:
            - name: '{{ ansible_name_module }} | Download Trident binary'
              get_url:
                url: "{{ trident_remote_url }}"
                dest: "{{ trident_binary_file }}"
                username: "{{ vault_registry_admin_username }}"
                password: "{{ vault_registry_admin_password }}"
                force_basic_auth: true
              when:
                - use_basic_auth is defined
                - use_basic_auth | bool 

            - name: '{{ ansible_name_module }} | Download Trident binary'
              get_url:
                url: "{{ trident_remote_url }}"
                dest: "{{ trident_binary_file }}"
              when:
                - not use_basic_auth is defined or not use_basic_auth | bool 

        - name: '{{ ansible_name_module }} | stat | Check if trident driver archive file exist'
          ansible.builtin.stat:
            path: "{{ trident_binary_file }}"
            get_checksum: false
          register: trident_driver_archive_file_exist

        - assert:
            that:
              - trident_driver_archive_file_exist.stat is defined 
              - trident_driver_archive_file_exist.stat.exists is defined 
              - trident_driver_archive_file_exist.stat.exists | bool 
              - trident_driver_archive_file_exist.stat.path is defined 
            msg: " the Trident Driver archive has to be a valid file on the controler"

        - name: '{{ ansible_name_module }} | file:directory | Ensure the staging directory exist'
          ansible.builtin.file:
            path: "{{ staging_dir | default('/tmp/trident',true) }}"
            state: directory
            mode: 0755

        - name: '{{ ansible_name_module }} | Unpack Trident binary'
          unarchive:
            src: "{{ trident_binary_file }}"
            dest: "{{ staging_dir | default('/tmp/trident',true) }}"
          register: trident_driver_extracted

        - name: '{{ ansible_name_module }} | Print bundle Unpack output'
          debug:
            var: trident_driver_extracted
            verbosity: 2

        - name: '{{ ansible_name_module }} | set_fact | set files path facts'
          ansible.builtin.set_fact:
            deploy_dir: "{{ trident_driver_extracted.dest }}/trident-installer/deploy"
            crd_dir: "{{ trident_driver_extracted.dest }}/trident-installer/deploy/crds"
            helm_dir: "{{ trident_driver_extracted.dest }}/trident-installer/deploy/helm"
            bundle_file: "{{ trident_driver_extracted.dest }}/trident-installer/deploy/bundle_post_1_25.yaml"
            sample_dir: "{{ trident_driver_extracted.dest }}/trident-installer/sample-input"
            clusterrole_file: "{{ trident_driver_extracted.dest }}/trident-installer/deploy/clusterrole_post_1_25.yaml"
            orchestrator_file: "{{ trident_driver_extracted.dest }}/trident-installer/deploy/crds/trident.netapp.io_tridentorchestrators_crd.yaml"
          when:
            - trident_driver_extracted is defined
            - trident_driver_extracted.dest is defined
            - trident_driver_extracted.dest != '' 
            - trident_driver_extracted.extract_results.rc is defined
            - trident_driver_extracted.extract_results.rc == 0 

    - name: '{{ ansible_name_module }} | Use default manifests'
      when:
        - use_default_manifests is defined
        - use_default_manifests | bool
      block:
        - name: '{{ ansible_name_module }} | template | Copy default manifests into  staging location'
          ansible.builtin.copy:
            src: "{{ playbook_dir }}/files/trident"
            dest: "{{ staging_dir | default('/tmp', true) }}"
            force: yes

        - name: '{{ ansible_name_module }} | set_fact | set files path facts'
          ansible.builtin.set_fact:
            deploy_dir: "{{ staging_dir | default('/tmp', true) }}/trident"
            crd_dir: "{{ staging_dir | default('/tmp', true) }}/trident/crds"
            helm_dir: "{{ staging_dir | default('/tmp', true) }}/trident/helm"
            bundle_file: "{{ staging_dir | default('/tmp', true) }}/trident/bundle_post_1_25.yaml"
            sample_dir: "{{ staging_dir | default('/tmp', true) }}/trident/sample-input"
            clusterrole_file: "{{ staging_dir | default('/tmp', true) }}/trident/clusterrole_post_1_25.yaml"
            orchestrator_file: "{{ staging_dir | default('/tmp', true) }}/trident/crds/trident.netapp.io_tridentorchestrators_crd.yaml"

    - name: '{{ ansible_name_module }} | Deploy Trident CSI driver using OC binary'
      when:
        - not use_helm is defined or not use_helm | bool
      block:
        - name: '{{ ansible_name_module }} | set_fact | set registry and port fully qualified path'
          ansible.builtin.set_fact:
            registry_host_fqdn_port: "{{ (registry_host_fqdn + ':' + registry_host_port) if registry_host_port is defined and registry_host_port != '' and registry_host_port | int > 0 else registry_host_fqdn }}" 

        - name: '{{ ansible_name_module }} | replace | update image file location in operator manifest'
          ansible.builtin.replace:
            path: "{{ deploy_dir }}/operator.yaml"
            regexp: 'netapp/trident-operator'
            replace: '{{ registry_host_fqdn_port }}/{{ local_repository }}/netapp/trident-operator'

        - name: '{{ ansible_name_module }} | replace | update image file location in bundle manifest'
          ansible.builtin.replace:
            path: "{{ bundle_file }}"
            regexp: ': netapp/trident-operator'
            replace: ': {{ registry_host_fqdn_port }}/{{ local_repository }}/netapp/trident-operator'

        - name: '{{ ansible_name_module }} | replace | update image file location in bundle manifest'
          ansible.builtin.replace:
            path: "{{ bundle_file }}"
            regexp: 'docker.io/netapp/trident-operator'
            replace: '{{ registry_host_fqdn_port }}/{{ local_repository }}/netapp/trident-operator'

        - name: '{{ ansible_name_module }} | replace | update image file location in orchestrator manifest'
          ansible.builtin.replace:
            path: "{{ deploy_dir }}/crds/tridentorchestrator_cr_customimage.yaml"
            regexp: 'localhost:5000/netapp/trident'
            replace: '{{ registry_host_fqdn_port }}/{{ local_repository }}/netapp/trident'

        - name: '{{ ansible_name_module }} | replace | update image file location in orchestrator pull secret manifest 1 of 2'
          ansible.builtin.replace:
            path: "{{ deploy_dir }}/crds/tridentorchestrator_cr_imagepullsecrets.yaml"
            regexp: 'netapp/trident'
            replace: '{{ registry_host_fqdn_port }}/{{ local_repository }}/netapp/trident'

        - name: '{{ ansible_name_module }} | replace | update image file location in orchestrator pull secret manifest 2 of 2'
          ansible.builtin.replace:
            path: "{{ deploy_dir }}/crds/tridentorchestrator_cr_imagepullsecrets.yaml"
            regexp: 'thisisasecret'
            replace: '{{ registry_pullsecret }}'

        - name: '{{ ansible_name_module }} | replace | update image file location in orchestrator autosupport cr manifest 1 of 2'
          ansible.builtin.replace:
            path: "{{ deploy_dir }}/crds/tridentorchestrator_cr_autosupport.yaml"
            regexp: 'netapp/trident'
            replace: '{{ registry_host_fqdn_port }}/{{ local_repository }}/netapp/trident'

        - name: '{{ ansible_name_module }} | replace | update image file location in orchestrator autosupport cr manifest 2 of 2'
          ansible.builtin.replace:
            path: "{{ deploy_dir }}/crds/tridentorchestrator_cr_autosupport.yaml"
            regexp: 'http://proxy.example.com:8888'
            replace: '{{ autosupport_proxy_url }}'
          when:
            - update_autosupport_proxy is defined
            - update_autosupport_proxy | bool 
            - autosupport_proxy_url is defined
            - autosupport_proxy_url != '' 

        - name: '{{ ansible_name_module }} | set_fact | trident sig storage repo fact'
          ansible.builtin.set_fact:
            trident_sig_repo: "sig-storage"
          when:
            - not trident_sig_repo is defined or trident_sig_repo == ''

        - name: '{{ ansible_name_module }} | set_fact | trident image repo fact'
          ansible.builtin.set_fact:
            trident_image_repo: "netapp"
          when:
            - not trident_image_repo is defined or trident_image_repo == ''

        - name: '{{ ansible_name_module }} | set_fact | trident image tag fact'
          ansible.builtin.set_fact:
            trident_image_tag: "trident:24.06.0"
          when:
            - not trident_image_tag is defined or trident_image_tag == ''

        - name: '{{ ansible_name_module }} | set_fact | trident autosupport image tag fact'
          ansible.builtin.set_fact:
            trident_autosupport_image_tag: "trident-autosupport:24.06.0"
          when:
            - not trident_autosupport_image_tag is defined or trident_autosupport_image_tag == ''

        - name: '{{ ansible_name_module }} | insert | update image file location in orchestrator manifest 1 of 3'
          ansible.builtin.lineinfile:
            dest: "{{ deploy_dir }}/crds/tridentorchestrator_cr.yaml"
            insertbefore: '^namespace:'
            line: 'imageRegistry: {{ registry_host_fqdn_port }}/{{ local_repository }}/{{ trident_sig_repo }}'

        - name: '{{ ansible_name_module }} | insert | update image file location in orchestrator manifest 2 of 3'
          ansible.builtin.lineinfile:
            dest: "{{ deploy_dir }}/crds/tridentorchestrator_cr.yaml"
            insertbefore: '^Debug:'
            line: 'autosupportImage: {{ registry_host_fqdn_port }}/{{ local_repository }}/{{ trident_image_repo }}/{{ trident_autosupport_image_tag }}'

        - name: '{{ ansible_name_module }} | insert | update image file location in orchestrator manifest 3 of 3'
          ansible.builtin.lineinfile:
            dest: "{{ deploy_dir }}/crds/tridentorchestrator_cr.yaml"
            insertafter: '^namespace:'
            line: 'tridentImage: {{ registry_host_fqdn_port }}/{{ local_repository }}/{{ trident_image_repo }}/{{ trident_image_tag }}'

        - name: '{{ ansible_name_module }} | Create Operator Namespace'
          ansible.builtin.command: >
            {{ openshift_cli }} apply -f '{{ deploy_dir }}/namespace.yaml'
          failed_when: "trident_operator_ns_created.rc > 0 and not ' already exists' in trident_operator_ns_created.stderr"
          register: trident_operator_ns_created 

        - name: '{{ ansible_name_module }} | Configure default pullsecret for trident'
          when:
            - not registry_pullsecret is defined or registry_pullsecret == ''
          block:
            - name: '{{ ansible_name_module }} | Get Existing pull secret secret'
              ansible.builtin.command: >
                {{ openshift_cli }} get secret pull-secret -n openshift-config
              ignore_errors: yes
              register: pull_secret_exist

            - name: '{{ ansible_name_module }} | '
              when:
                - pull_secret_exist.rc is defined
                - pull_secret_exist.rc == 0
                - pull_secret_exist.stdout is defined
                - pull_secret_exist.stdout != '' 
              block:
                - name: '{{ ansible_name_module }} | Get Existing trident pull secret'
                  ansible.builtin.command: >
                    {{ openshift_cli }} get secret pull-secret -n trident
                  ignore_errors: yes
                  register: trident_pull_secret_exist

                - name: '{{ ansible_name_module }} | Delete existing trident pull secret'
                  ansible.builtin.command: >
                    {{ openshift_cli }} delete secret pull-secret -n trident
                  when:
                    - trident_pull_secret_exist.rc is defined 
                    - trident_pull_secret_exist.rc == 0 
                    - trident_pull_secret_exist.stdout is defined 
                    - trident_pull_secret_exist.stdout != '' 

                - name: '{{ ansible_name_module }} | command | Extract existing pull secret file'
                  ansible.builtin.command: >
                    {{ openshift_cli }} extract secret/pull-secret -n openshift-config --to={{ staging_dir | default('/tmp/trident',true) }}
                  register: pull_secret_extracted

                - name: '{{ ansible_name_module }} | command | Create pull secret in trient namespace'
                  ansible.builtin.command: >
                    {{ openshift_cli }} create secret docker-registry pull-secret --from-file=.dockerconfigjson={{ staging_dir | default('/tmp/trident',true) }}/.dockerconfigjson -n trident --confirm=true
                  register: pull_secret_created

        - name: '{{ ansible_name_module }} | Create Operator CRD'
          ansible.builtin.command: >
            {{ openshift_cli }} create -f '{{ orchestrator_file }}'
          failed_when: "trident_operator_crd_created.rc > 0 and not ' already exists' in trident_operator_crd_created.stderr"
          register: trident_operator_crd_created 

        - name: '{{ ansible_name_module }} | Deploy Orchestrator Bundle'
          ansible.builtin.command: >
            {{ openshift_cli }} create -f '{{ bundle_file }}'
          failed_when: "trident_operator_bundle_created.rc > 0 and not ' already exists' in trident_operator_bundle_created.stderr"
          register: trident_operator_bundle_created 

        - name: '{{ ansible_name_module }} | Retrieve Operator Resources'
          ansible.builtin.command: >
            {{ openshift_cli }} get all -n {{ trident_operator_ns | default('trident', true) }} 
          register: trident_operator_resources_retrieved 

        - name: '{{ ansible_name_module }} | Create Orchestrator CR'
          ansible.builtin.command: >
            {{ openshift_cli }} create -f '{{ deploy_dir }}/crds/tridentorchestrator_cr.yaml'
          failed_when: "trident_operator_cr_created.rc > 0 and not ' already exists' in trident_operator_cr_created.stderr"
          when:
            - trident_driver_version is defined 
            - trident_driver_version != '' 
            - trident_driver_version is version('24.06', '>=') 
          register: trident_operator_cr_created 

    - name: '{{ ansible_name_module }} | Deploy Trident CSI driver using OC binary'
      when:
        - use_helm is defined
        - use_helm | bool
      block:
        - name: '{{ ansible_name_module }} | command:which | Check if helm is installed'
          ansible.builtin.shell: >
            which helm
          ignore_errors: yes
          register: helm_binary

        - assert:
            that:
              - helm_binary is defined 
              - helm_binary.rc is defined 
              - helm_binary.rc == 0 
              - helm_binary.stdout is defined 
              - helm_binary.stdout != '' 
            msg: " the helm binary need to be installed on the controller before this install method can be used"

        - name: '{{ ansible_name_module }} | Print warning output'
          debug:
            msg: "Ensure you have created a values.yaml file to be used along with apporpriate overwrites especially for image and registry information."

        - name: '{{ ansible_name_module }} | template | Copy values template to staging location'
          ansible.builtin.template:
            src: "templates/trident-values.yaml.j2"
            dest: "{{ staging_dir | default('/tmp/trident', true) }}/values-trident.yaml"
            force: yes

        - name: '{{ ansible_name_module }} | stat | Check if value file exist'
          ansible.builtin.stat:
            path: "{{ staging_dir | default('/tmp/trident', true) }}/values-trident.yaml"
            get_checksum: false
          register: trident_driver_values_file_exist

        - assert:
            that:
              - trident_driver_values_file_exist.stat is defined 
              - trident_driver_values_file_exist.stat.exists is defined 
              - trident_driver_values_file_exist.stat.exists | bool 
              - trident_driver_values_file_exist.stat.path is defined 
            msg: " You a values file named values-trident.yaml with the necessary overrides including pull secret which need to exist and valid image location in your private registry"

        - name: '{{ ansible_name_module }} | shell | Install'
          ansible.builtin.shell: >
            {{ helm_binary.stdout }} upgrade --install trident {{ helm_dir }} --version 100.2406.0  --create-namespace --namespace trident --set tridentDebug=true --values {{ staging_dir | default('/tmp/trident', true) }}/values-trident.yaml
          register: trident_charts_installed 

    ##################### Create Trident Backend Config ###################################
    - name: '{{ ansible_name_module }} | Create Trident Storage backend if necessary'
      when:
        - create_trident_backend is defined
        - create_trident_backend | bool
      block:
        - name: '{{ ansible_name_module }} | Use default backend config'
          when:
            - not trident_backend_files is defined or trident_backend_files | length == 0
          block:
            - ansible.builtin.assert:
                that:
                  - tbc_backend_username is defined 
                  - tbc_backend_username != ''
                msg: " the Trident Backend Config Volume username for is required to be a valid non empty value"
            - ansible.builtin.assert:
                that:
                  - tbc_backend_password is defined 
                  - tbc_backend_password != ''
                msg: " the Trident Backend Config Volume password for is required to be a valid non empty value"
            - ansible.builtin.assert:
                that:
                  - tbc_backend_mgmt_interface_ip is defined 
                  - tbc_backend_mgmt_interface_ip != ''
                msg: " the Trident Backend Management Interface IP is required to be a valid non empty value"
            - ansible.builtin.assert:
                that:
                  - tbc_backend_data_interface_ip is defined 
                  - tbc_backend_data_interface_ip != ''
                msg: " the Trident Backend Data Interface IP is required to be a valid non empty value"

            - name: '{{ ansible_name_module }} | set_fact | trident backend tbc default config file fact'
              ansible.builtin.set_fact:
                trident_tbc_file: "{{ staging_dir | default('/tmp/trident', true) }}/trident-backend-config.yaml"

            - name: '{{ ansible_name_module }} | template | Copy backend config template to staging location'
              ansible.builtin.template:
                src: "templates/trident-backend-config.yaml.j2"
                dest: "{{ trident_tbc_file }}"
                force: yes

            - name: '{{ ansible_name_module }} | set_fact | trident backend config file fact'
              ansible.builtin.set_fact:
                trident_backend_files: "{{ trident_backend_files | default([],true) + [trident_tbc_file] }}"

        - name: '{{ ansible_name_module }} | stat | Check if TBC file exist'
          ansible.builtin.stat:
            path: "{{ item }}"
            get_checksum: false
          loop: "{{ trident_backend_files }}"
          register: tbc_files_exist

        - name: '{{ ansible_name_module }} | debug | Print TBC Backend files exist Check output'
          debug:
            var: item
            verbosity: 2
          loop: "{{ tbc_files_exist.results }}"

        - name: '{{ ansible_name_module }} | Create Trident Backend Config'
          ansible.builtin.command: >
            {{ openshift_cli }} create -f '{{ item.stat.exists.path }}'
          loop: "{{ tbc_files_exist.results }}"
          failed_when: "trident_tbc_created.rc > 0 and not ' already exists' in trident_tbc_created.stderr"
          when:
            - item.stat is defined
            - item.stat.exists is defined
            - item.stat.exists | bool 
            - item.stat.exists.path is defined
          register: trident_tbc_created 

    ##################### Create Trident t ###################################
    - name: '{{ ansible_name_module }} | Create Trident Storage classes if necessary'
      when:
        - create_trident_sc is defined
        - create_trident_sc | bool
      block:
        - name: '{{ ansible_name_module }} | Use default Trident Storage Class'
          when:
            - not trident_sc_files is defined or trident_sc_files | length == 0
          block:
            - name: '{{ ansible_name_module }} | set_fact | trident backend tbc default config file fact'
              ansible.builtin.set_fact:
                trident_sc_file: "{{ staging_dir | default('/tmp/trident', true) }}/trident-storageclass.yaml"

            - name: '{{ ansible_name_module }} | template | Copy Trident Storage template to staging location'
              ansible.builtin.template:
                src: "templates/trident-storageclass.yaml.j2"
                dest: "{{ trident_sc_file }}"
                force: yes
              vars:
                make_tbc_sc_default: 'true'

            - name: '{{ ansible_name_module }} | set_fact | trident storage class files fact'
              ansible.builtin.set_fact:
                trident_backend_sc_files: "{{ trident_backend_files | default([],true) + [trident_sc_file] }}"

        - name: '{{ ansible_name_module }} | stat | Check if TBC file exist'
          ansible.builtin.stat:
            path: "{{ item }}"
            get_checksum: false
          loop: "{{ trident_backend_sc_files }}"
          register: tbc_sc_files_exist

        - name: '{{ ansible_name_module }} | debug | Print SC files exist Check output'
          debug:
            var: item
            verbosity: 2
          loop: "{{ tbc_sc_files_exist.results }}"

        - name: '{{ ansible_name_module }} | Create Trident Storage Classes'
          ansible.builtin.command: >
            {{ openshift_cli }} create -f '{{ item.stat.exists.path }}'
          loop: "{{ tbc_sc_files_exist.results }}"
          failed_when: "trident_sc_created.rc > 0 and not ' already exists' in trident_sc_created.stderr"
          when:
            - item.stat is defined
            - item.stat.exists is defined
            - item.stat.exists | bool 
            - item.stat.exists.path is defined
          register: trident_sc_created 

