- name: ' Konductor | Provision UPI Infra | harden-cluster-manually-remediate-compliance-operator-findings.yml'
  hosts: localhost
  vars:
    module: "Manually Remediate findings"
    ansible_name_module: " Post Cluster Installation | Harden Cluster | {{ module }}"
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'

  pre_tasks:
    - name: '{{ ansible_name_module }} | import_role | OCP cluster login'
      ansible.builtin.import_role:
        name: ocp-cluster-login

  tasks:
    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} get | outdated remediations '
      ansible.builtin.shell: >
        {{ openshift_cli }} -n openshift-compliance get complianceremediations.compliance.openshift.io \
          -l complianceoperator.openshift.io/outdated-remediation= --no-headers | awk '{print $1}'
      register: outdated_remediations 

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} patch | remove outdated remediations '
      ansible.builtin.command: >
        {{ openshift_cli }} -n openshift-compliance patch complianceremediations.compliance.openshift.io \
          {{ item }} --type json -p '[{"op":"remove", "path":/spec/outdated}]'
      loop: "{{ outdated_remediations.stdout_lines }}"
      when:
        - outdated_remediations is defined
        - outdated_remediations.stdout_lines is defined
        - outdated_remediations.stdout_lines | length > 0 
      register: outdated_remediation_removed

#################### Manually rerun scans  #################################

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} | get compliance scansettings'
      ansible.builtin.shell: >
        {{ openshift_cli }} -n openshift-compliance get scansettings.compliance.openshift.io --no-headers |  wc -l
      register: compliance_scansettings_count

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | Create Default ScanSetting CR if necessary'
      when:
        - compliance_scansettings_count.stdout is defined
        - compliance_scansettings_count.stdout | int == 0 
      block:
        - name: '{{ ansible_name_module }} | get storage class if not provided'
          ansible.builtin.shell: >
            {{ openshift_cli }} get storageclass --no-headers | grep -i "{{ storage_class_type | d('kubernetes.io/aws-ebs') }}" | awk '{print $1}'
          register: default_sc

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | Render default ScanSetting CR'
          vars:
            cluster_storage_class: "{{ default_sc.stdout }}"
            compliance_profile_name: 'default'
            auto_create_remediation: 'false'
            auto_apply_remediate: 'false'
          ansible.builtin.template:
            src: "templates/scansetting-cr.yaml.j2"
            dest: "{{ staging_dir | d('/tmp', true) }}/scansetting-cr.yaml"
            force: yes

        - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | default scan setting '
          ansible.builtin.command: >
            {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/scansetting-cr.yaml -n openshift-compliance
          register: scansetting_applied

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} | get compliance scansettings'
      ansible.builtin.shell: >
        {{ openshift_cli }} -n openshift-compliance get scansettings.compliance.openshift.io --no-headers | awk '{print $1}'
      register: compliance_scansettings

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} | create scansetting binding '
      ansible.builtin.command: >
        {{ openshift_cli }} compliance bind -N {{ item }} profile/{{ item }} 
      failed_when:
        - compliance_scansettingbindings_created.results[idx].rc is defined
        - compliance_scansettingbindings_created.results[idx].rc > 0
        - compliance_scansettingbindings_created.results[idx].stderr is defined
        - compliance_scansettingbindings_created.results[idx].stderr != '' 
        - not 'already exists' in compliance_scansettingbindings_created.results[idx].stderr 
      loop:
        - "{{ rhcos4_profile | d('rhcos4-stig', true) }}"
        - "{{ ocp4_profile | d('ocp4-stig', true) }}"
        - "{{ ocp4_profile_node | d('ocp4-stig-node', true) }}"
      loop_control:
        index_var: idx
      register: compliance_scansettingbindings_created

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} | get compliance scansettingbindngs'
      ansible.builtin.shell: >
        {{ openshift_cli }} -n openshift-compliance get scansettingbindings.compliance.openshift.io --no-headers | awk '{print $1}'
      register: compliance_scansettingbindings

    - name: '{{ ansible_name_module }} | get machineconfig pools'
      ansible.builtin.shell: >
        {{ openshift_cli }} get mcp --no-headers | awk '{print $1}' | grep -v ','| sort | uniq
      register: node_mcps

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} patch | pause mcps '
      ansible.builtin.command: >
        {{ openshift_cli }} patch mcp {{ item }} --type merge -p '{"spec":{"paused": true}}' 
      loop: "{{ node_mcps.stdout_lines }}"
      when:
        - node_mcps is defined
        - node_mcps.stdout_lines is defined
        - node_mcps.stdout_lines | length > 0 
      register: mcp_paused 

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} | get compliance scans'
      ansible.builtin.shell: >
        {{ openshift_cli }} -n openshift-compliance get compliancescans.compliance.openshift.io --no-headers | awk '{print $1}'
      register: compliance_scans

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} | annotate scans '
      ansible.builtin.command: >
        {{ openshift_cli }} -n openshift-compliance annotate --overwrite compliancescans.compliance.openshift.io {{ item }} 'compliance.openshift.io/rescan='  
      loop: "{{ compliance_scans.stdout_lines }}"
      when:
        - compliance_scans is defined
        - compliance_scans.stdout_lines is defined
        - compliance_scans.stdout_lines | length > 0 
      register: compliance_rescan_enabled

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} get | remediations '
      ansible.builtin.shell: >
        {{ openshift_cli }} -n openshift-compliance get complianceremediations.compliance.openshift.io \
          --no-headers | awk '{print $1}'
      ignore_errors: true 
      register: compliance_remediations 

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} | disable autoremediation '
      ansible.builtin.command: >
        {{ openshift_cli }} -n openshift-compliance patch complianceremediations.compliance.openshift.io {{ item }} --type merge -p '{"spec":{"apply": false}}' 
      loop: "{{ compliance_remediations.stdout_lines }}"
      when:
        - compliance_remediations is defined
        - compliance_remediations.stdout_lines is defined
        - compliance_remediations.stdout_lines | length > 0 
      register: compliance_autoremediation_disabled

    - name: '{{ ansible_name_module }} | ansible.builtin.command:which | check if oc-compliance is installed '
      ansible.builtin.command: which oc-compliance 
      ignore_errors: yes
      failed_when:
        - oc_compliance_binary_check.rc > 0
        - "not 'no oc-compliance' in oc_compliance_binary_check.stderr"
      register: oc_compliance_binary_check

    - name: '{{ ansible_name_module }} | extract oc compliance command'
      when:
        - ( not oc_compliance_binary_check.stdout is defined or oc_compliance_binary_check.stdout == '') or (extract_oc_compliance_binary is defined and extract_oc_compliance_binary | bool) 
      block:
        - name: '{{ ansible_name_module }} | podman run | extract oc compliance command'
          ansible.builtin.set_fact:
            oc_compliance_scan_binary_dir: "/usr/local/bin"
          when:
            - not oc_compliance_scan_binary_dir is defined or oc_compliance_scan_binary_dir == ''

        - name: '{{ ansible_name_module }} | podman run | extract oc compliance command'
          ansible.builtin.shell: >
            podman run --authfile {{ registry_auth_config }} --rm --entrypoint /bin/cat \
             {{ scan_results_export_image }} \
              /usr/bin/oc-compliance > {{ oc_compliance_scan_binary_dir }}
          register: scan_results_binary_extracted

        - name: '{{ ansible_name_module }} | file  | set permission on binary'
          ansible.builtin.file:
            path: "{{ oc_compliance_scan_binary_dir }}/oc-compliance"
            mode: 0755

    - name: '{{ ansible_name_module }} | set_fact | Set the oc_compliance_scan_binary when undefined'
      ansible.builtin.set_fact:
        oc_compliance_scan_binary: "{{ oc_compliance_binary_check.stdout if (oc_compliance_binary_check.stdout is defined and oc_compliance_binary_check.stdout != '' ) else (oc_compliance_scan_binary_dir + '/oc-compliance') }}"
      when:
        - not oc_compliance_scan_binary is defined or oc_compliance_scan_binary == ''

    - name: '{{ ansible_name_module }} | ansible.builtin.shell:{{ oc_compliance_scan_binary }} rerun-now | rerun scans'
      ansible.builtin.command: >
        {{ oc_compliance_scan_binary }} rerun-now scansettingbindings {{ item }} -n openshift-compliance 
      loop: "{{ compliance_scansettingbindings.stdout_lines }}"
      when:
        - compliance_scansettingbindings is defined
        - compliance_scansettingbindings.stdout_lines is defined
        - compliance_scansettingbindings.stdout_lines | length > 0
        - not 'default' in item
        - not 'compliance' in item
      register: scan_rerun

################## Patch compliance scan setting to disable auto remidiation  ####################
    - name: '{{ ansible_name_module }} | Patch ScanSetting to disable auto Remediation'
      block:
        - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} | patch scansettings 1 of 3'
          ansible.builtin.command: >
            {{ openshift_cli }} patch scansettings.compliance.openshift.io {{ item }} --type merge -p '{"autoUpdateRemediations": false}' -n openshift-compliance
          loop: "{{ compliance_scansettings.stdout_lines }}"
          when:
            - compliance_scansettings is defined
            - compliance_scansettings.stdout_lines is defined
            - compliance_scansettings.stdout_lines | length > 0
            - not 'default' in item
          register: compliance_scansettings_patched_autoupdate_disabled

        - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} | patch scansettings 2 of 3'
          ansible.builtin.command: >
            {{ openshift_cli }} patch scansettings.compliance.openshift.io {{ item }} --type merge -p '{"autoApplyRemediations": false}' -n openshift-compliance
          loop: "{{ compliance_scansettings.stdout_lines }}"
          when:
            - compliance_scansettings is defined
            - compliance_scansettings.stdout_lines is defined
            - compliance_scansettings.stdout_lines | length > 0
            - not 'default' in item
          register: compliance_scansettings_patched_autoapply_disabled

        - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} | patch scansettings 3 of 3'
          ansible.builtin.command: >
            {{ openshift_cli }} patch scansettings.compliance.openshift.io {{ item }} --type merge -p '{"suspend": true}' -n openshift-compliance
          loop: "{{ compliance_scansettings.stdout_lines }}"
          when:
            - compliance_scansettings is defined
            - compliance_scansettings.stdout_lines is defined
            - compliance_scansettings.stdout_lines | length > 0
              #- not 'default' in item
          register: compliance_scansettings_patched_suspend_applied

################## unpause MCPs  ####################
    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} patch | pause mcps '
      ansible.builtin.command: >
        {{ openshift_cli }} patch mcp {{ item }} --type merge -p '{"spec":{"paused": false}}' 
      loop: "{{ node_mcps.stdout_lines }}"
      when:
        - node_mcps is defined
        - node_mcps.stdout_lines is defined
        - node_mcps.stdout_lines | length > 0 
      register: mcp_unpaused 

##################  Apply remediations ####################
    - name: '{{ ansible_name_module }} | Apply remediations if applicable '
      when:
        - apply_remediation is defined
        - apply_remediation | bool 
      block:
        - name: '{{ ansible_name_module }} | apply specific remediations '
          when:
            - not remediate_suites is defined or not remediate_suites | bool
          block:
            - name: '{{ ansible_name_module }} |  {{ openshift_cli }} | get remediations'
              ansible.builtin.shell: >
                {{ openshift_cli }} -n openshift-compliance get complianceremediations.compliance.openshift.io --no-headers | awk '{print $1}' 
              when:
                - not remediations_to_apply is defined or remediations_to_apply | d([], true) | length == 0
              register: compliance_remediations_raw

              #remediations_to_apply: "{{ remediations_to_apply | d([],true) + [ compliance_remediations_raw.stdout_lines ] }}"
            - name: '{{ ansible_name_module }} | set_fact | remediation suite'
              ansible.builtin.set_fact:
                remediations_to_apply: "{{ compliance_remediations_raw.stdout_lines | list }}"
              when:
                - compliance_remediations_raw is defined 
                - compliance_remediations_raw.rc is defined 
                - compliance_remediations_raw.rc is defined 
                - compliance_remediations_raw.stdout_lines is defined 
                - compliance_remediations_raw.stdout_lines | length > 0

            - name: print output
              debug:
                var: remediations_to_apply

            - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} get | compliancesuites '
              ansible.builtin.command: >
                {{ openshift_cli }} -n openshift-compliance patch complianceremediations.compliance.openshift.io {{ item }} --type merge -p '{"spec":{"apply": true}}'  
              loop: "{{ remediations_to_apply | d([], true) }}"
              when:
                - remediations_to_apply is defined
                - remediations_to_apply | length > 0 

        - name: '{{ ansible_name_module }} | apply remediations to scan suites'
          when:
            - remediate_suites is defined 
            - remediate_suites | bool
          block:
            - name: '{{ ansible_name_module }} | set_fact | remediation suite'
              ansible.builtin.set_fact:
                remediation_suites: "[disa-ocp4-stig,disa-ocp4-stig-node]"
              when:
                - not remediation_suites is defined or remediation_suites == ''

            - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} get | compliancesuites '
              ansible.builtin.shell: >
                {{ openshift_cli }} -n openshift-compliance get compliancesuites.compliance.openshift.io --no-headers | awk '{print $1}' 
              ignore_errors: yes
              register: compliance_suites

            - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} get | compliancesuites '
              ansible.builtin.command: >
                {{ openshift_cli }} -n openshift-compliance annotate --overwrite compliancesuites.compliance.openshift.io {{ item }} 'compliance.openshift.io/apply-remediation=' 
              loop: "{{ compliance_scansettingbindings.stdout_lines }}"
              when:
                - compliance_suites is defined
                - compliance_suites.stdout_lines is defined
                - compliance_suites.stdout_lines | length > 0
                - item in remediation_suites
              register: compliance_suites_remediated

            - name: '{{ ansible_name_module }} | ansible.builtin.shell:{{ oc_compliance_scan_binary }} rerun-now | rerun scans'
              ansible.builtin.command: >
                {{ oc_compliance_scan_binary }} rerun-now scansettingbindings {{ item }} -n openshift-compliance 
              loop: "{{ compliance_scansettingbindings.stdout_lines }}"
              when:
                - compliance_scansettingbindings is defined
                - compliance_scansettingbindings.stdout_lines is defined
                - compliance_scansettingbindings.stdout_lines | length > 0
                - not 'default' in item
                - not 'compliance' in item
              register: scan_rerun_remediated


################## Delete ScanSettingBindings  ####################
    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} | delete scansettingbindings '
      ansible.builtin.command: >
        {{ openshift_cli }} delete scansettingbindings.compliance.openshift.io {{ item }} -n openshift-compliance
      loop: "{{ compliance_scansettingbindings.stdout_lines }}"
      when:
        - compliance_scansettingbindings is defined
        - compliance_scansettingbindings.stdout_lines is defined
        - compliance_scansettingbindings.stdout_lines | length > 0
        - not 'default' in item
        - delete_ssb is defined
        - delete_ssb | bool 
      register: compliance_scansettingbindings_deleted

