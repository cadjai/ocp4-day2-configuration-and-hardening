- name: ' Configure Keycloak Provider | configure-custom-certificate-for-ingresscontroller.yml'
  hosts: localhost
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'
  vars:
    module: "Config Custom Certificate for Ingress Controller"
    ansible_name_module: "Configure Custom certificate | {{ module }}"

  pre_tasks:
    - name: '{{ ansible_name_module }} | Ensure required variables are set'
      when:
        - not decrypt_values is defined or not decrypt_values | bool
      block:
        - ansible.builtin.assert:
            that:
              - add_custom_ca_ingess is defined and add_custom_ca_ingess | bool
            msg: " the add_custom_ca_ingess must be set to true "
        - ansible.builtin.assert:
            that:
              - ingress_cert_file is defined and ingress_cert_file != ""
            msg: " the ingress_cert_file must be set and valid "
        - ansible.builtin.assert:
            that:
              - ingress_cert_key_file is defined and ingress_cert_key_file != ""
            msg: " the ingress_cert_key_file must be set and valid "

    - name: '{{ ansible_name_module }} Process encryted Certificate files'
      when:
        - decrypt_values is defined
        - decrypt_values | bool
      block:
        - name: '{{ ansible_name_module }} | set_fact | file_decryption_staging_dir '
          ansible.builtin.set_fact:
            file_decryption_staging_dir: "{{ staging_dir | d('/tmp', true) }}/decrypted-files"
          when:
            - not file_decryption_staging_dir is defined or not file_decryption_staging_dir != ''

        - name: '{{ ansible_name_module }} | ansible.builtin.file | Ensure the staging dir exist '
          ansible.builtin.file:
            path: "{{ file_decryption_staging_dir }}"
            state: directory
            mode: 0777
 
            # using the cert chain here instead of just cert. 
            #content: "{{ ingress_crt_b64 | ansible.builtin.b64decode }}"
        - name: '{{ ansible_name_module }} | decrypt file | custom cert file'
          ansible.builtin.copy:
            content: "{{ ingress_ca_b64 | ansible.builtin.b64decode }}"
            dest: "{{ file_decryption_staging_dir }}/ingress-server.crt"
            force: yes

        - name: '{{ ansible_name_module }} | set_fact | ingress_cert_file '
          ansible.builtin.set_fact:
            ingress_cert_file: "{{ file_decryption_staging_dir }}/ingress-server.crt"

        - name: '{{ ansible_name_module }} | decrypt file | custom cert key'
          ansible.builtin.copy:
            content: "{{ ingress_key_b64 | ansible.builtin.b64decode }}"
            dest: "{{ file_decryption_staging_dir }}/ingress-server.key"
            force: yes

        - name: '{{ ansible_name_module }} | set_fact | ingress_cert_key_file '
          ansible.builtin.set_fact:
            ingress_cert_key_file: "{{ file_decryption_staging_dir }}/ingress-server.key"

        - name: '{{ ansible_name_module }} | decrypt file | custom cert CA'
          ansible.builtin.copy:
            content: "{{ ingress_ca_b64 | ansible.builtin.b64decode }}"
            dest: "{{ file_decryption_staging_dir }}/ingress-ca-bundle.crt"
            force: yes

        - name: '{{ ansible_name_module }} | set_fact | ingress_cert_key_file '
          ansible.builtin.set_fact:
            custom_ca_bundle_file: "{{ file_decryption_staging_dir }}/ingress-ca-bundle.crt"

    - name: '{{ ansible_name_module }} | set_fact | ingress_ca_cm_name '
      ansible.builtin.set_fact:
        ingress_ca_cm_name: "user-ca-bundle"
      when:
        - not ingress_ca_cm_name is defined or ingress_ca_cm_name == ''

    - name: Install required pip library
      pip:
        name: openshift
        state: present

    - name: Ensure Proper Python dependency is installed for Openshift
      python_requirements_facts:
        dependencies:
          - openshift
          - requests
    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          --token {{ ocp_cluster_token }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      when:
        - ocp_cluster_token is defined and ocp_cluster_token != ""
      register: login_out

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          -u {{ ocp_cluster_user }} \
          -p {{ ocp_cluster_user_password }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      when:
        - not ocp_cluster_token is defined or ocp_cluster_token == ""
      register: login_out

    - name: '{{ ansible_name_module }} | Conditionally Create ConfigMap for Custom CA Bundle used for the ingress cert if not already provided'
      when:
        - add_custom_ca_bundle is defined
        - add_custom_ca_bundle | bool
        - ingress_ca_cm_name is defined
        - ingress_ca_cm_name != ''
        - custom_ca_bundle_file is defined
        - custom_ca_bundle_file != ''
      block:
        - name: '{{ ansible_name_module }} | config custom CA ingress | check custom CA cert file'
          stat:
            path: "{{ custom_ca_bundle_file }}"
          register: custom_ca_cert_file_exist

        - name: '{{ ansible_name_module }} | import_tasks | import of create-additional-ca-cm.yml to create Custom CA'
          import_role:
            name: copy-user-ca-bundle-cm-into-new-ca-bundle
            tasks_from: create-additional-ca-cm.yml
          vars:
            ca_trust_stores:
              custom-ingress-ca:
                fqdn: 'ca-bundle.crt'
                port: ''
                ca_file_pem: '{{ custom_ca_bundle_file }}'
            ca_bundle_cm_name: '{{ ingress_ca_cm_name }}'

    - name: '{{ ansible_name_module }} Check Custom Ingress controller Certificate files'
      block:
        - name: '{{ ansible_name_module }} | config custom CA ingress | check custom cert file'
          stat:
            path: "{{ ingress_cert_file }}"
          register: ingress_cert_file_exist

        - name: '{{ ansible_name_module }} | config custom CA ingress | check custom cert key file'
          stat:
            path: "{{ ingress_cert_key_file }}"
          register: ingress_cert_key_file_exist

        - name: '{{ ansible_name_module }} | config custom CA ingress | check user ca'
          shell: >
            {{ openshift_cli }} get cm {{ ingress_ca_cm_name | default('user-ca-bundle', true) }} -n openshift-config -o yaml
          ignore_errors: true
          register: ingress_ca_cm_exist

  tasks:
    - name: '{{ ansible_name_module }} | set_fact | cluster_name '
      ansible.builtin.set_fact:
        ingress_cert_secret_name: "ingress-secret"
      when:
        - not is ingress_cert_secret_name is defined or ingress_cert_secret_name == ""

    - name: Configure ingresscontroller to use custom certificate
      when:
        - ingress_cert_file_exist is defined
        - ingress_cert_file_exist.stat is defined
        - ingress_cert_file_exist.stat.isreg is defined
        - ingress_cert_file_exist.stat.isreg | bool 
        - ingress_cert_key_file_exist is defined
        - ingress_cert_key_file_exist.stat is defined
        - ingress_cert_key_file_exist.stat.isreg is defined
        - ingress_cert_key_file_exist.stat.isreg | bool 
      block:
        - name: '{{ ansible_name_module }} | Get Existing ingress custom cert secret'
          ansible.builtin.command: >
            {{ openshift_cli }} get secret {{ ingress_cert_secret_name }} -n openshift-ingress 
          ignore_errors: yes
          register: ingress_secret_exist

        - name: '{{ ansible_name_module }} | Delete Existing ingress custom cert secret'
          ansible.builtin.command: >
            {{ openshift_cli }} delete secret {{ ingress_cert_secret_name }} -n openshift-ingress
          ignore_errors: yes
          when:
            - ingress_secret_exist.rc is defined
            - ingress_secret_exist.rc == 0
          register: ingress_secret_deleted

        - name: '{{ ansible_name_module }} | create ingress custom cert secret'
          ansible.builtin.command: >
            {{ openshift_cli }} create secret tls {{ ingress_cert_secret_name }} --cert={{ ingress_cert_file }} --key={{ ingress_cert_key_file }} -n openshift-ingress

        - name: '{{ ansible_name_module }} | Patch Ingress Controller'
          ansible.builtin.command: >
            {{ openshift_cli }} patch ingresscontroller.operator default --type=merge -p  '{"spec":{"defaultCertificate": {"name": "{{ ingress_cert_secret_name }}"}}}' -n openshift-ingress-operator

        - name: '{{ ansible_name_module }} | Create list of CM files to use'
          command: >
            {{ openshift_cli }} get cm {{ ingress_ca_cm_name }} -n openshift-config
          register: default_c_bundle_check

        - name: '{{ ansible_name_module }} | Patch Proxy Config' 
          ansible.builtin.command: >
            {{ openshift_cli }} patch proxy/cluster --type=merge --patch='{"spec":{"trustedCA":{"name":"{{ ingress_ca_cm_name }}"}}}'
          when:
            - ingress_cert_file_exist is defined
            - ingress_cert_file_exist.stat is defined
            - ingress_cert_file_exist.stat.isreg is defined
            - ingress_cert_file_exist.stat.isreg | bool 
            - ingress_cert_key_file_exist is defined
            - ingress_cert_key_file_exist.stat is defined

        - name: '{{ ansible_name_module }} | Enable CA injection CM' 
          when:
            - enable_ca_injection is defined
            - enable_ca_injection | bool 
            - ingress_cert_file_exist is defined
            - ingress_cert_file_exist.stat is defined
            - ingress_cert_file_exist.stat.isreg is defined
            - ingress_cert_file_exist.stat.isreg | bool 
            - ingress_cert_key_file_exist is defined
            - ingress_cert_key_file_exist.stat is defined
          block:
            - name: '{{ ansible_name_module }} | set_fact | ingress_ca_injection_cm_name '
              ansible.builtin.set_fact:
                ingress_ca_injection_cm_name: "{{ ingress_ca_cm_name }}-bundle"
              when:
                - not ingress_ca_injection_cm_name is defined or ingress_ca_injection_cm_name == ''

            - name: '{{ ansible_name_module }} | Add empty ConfigMap to use as CA injection CM'
              ansible.builtin.command: >
                {{ openshift_cli }} get configmap {{ ingress_ca_injection_cm_name }} -n openshift-config
              register: injection_cm_exist

            - name: '{{ ansible_name_module }} | Delete Existing injection cm'
              ansible.builtin.command: >
                {{ openshift_cli }} delete configmap {{ ingress_ca_injection_cm_name }} -n openshift-config
              ignore_errors: yes
              when:
                - injection_cm_exist.rc is defined
                - injection_cm_exist.rc == 0
              register: injection_cm_deleted

            - name: '{{ ansible_name_module }} | Add empty ConfigMap to use as CA injection CM'
              ansible.builtin.command: >
                {{ openshift_cli }} create configmap {{ ingress_ca_injection_cm_name }} -n openshift-config

            - name: '{{ ansible_name_module }} | Add label to empty ConfigMap created above to use as CA injection CM' 
              ansible.builtin.command: >
                {{ openshift_cli }} label configmap {{ ingress_ca_injection_cm_name }} config.openshift.io/inject-trusted-cabundle=true -n openshift-config

